import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.SUPABASE_URL || ''
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || ''

const supabase = createClient(supabaseUrl, supabaseServiceRoleKey)

export async function POST(req: Request) {
  try {
    const body = await req.json()
    const { paymentId, txid } = body

    if (!paymentId || !txid) {
      return NextResponse.json({ success: false, error: 'Thi·∫øu paymentId ho·∫∑c txid' }, { status: 400 })
    }

    // G·ªçi Pi API ƒë·ªÉ x√°c nh·∫≠n giao d·ªãch
    const piRes = await fetch(`https://api.minepi.com/v2/payments/${paymentId}/complete`, {
      method: 'POST',
      headers: {
        'Authorization': `Key ${process.env.PI_API_SECRET || ''}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ txid }),
    })

    const piData = await piRes.json()

    // N·∫øu Pi tr·∫£ l·ªói ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu, kh√¥ng l∆∞u ƒë∆°n
    if (!piData || !piData.data || !piData.data.transaction || !piData.data.transaction.txid) {
      console.error('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch h·ª£p l·ªá t·ª´ Pi API:', piData)
      return NextResponse.json({ success: false, error: 'L·ªói x·ª≠ l√Ω giao d·ªãch t·ª´ Pi' }, { status: 400 })
    }

    const payment = piData.data

    // L∆∞u ƒë∆°n h√†ng v√†o Supabase
    const { data, error } = await supabase.from('orders').insert([
      {
        payment_id: payment.identifier,
        txid: payment.transaction.txid,
        uid: payment.user.uid || '', // c√≥ th·ªÉ kh√¥ng c√≥ n·∫øu thi·∫øu
        username: payment.user.username || '',
        amount: payment.amount || 0.001,
        product_id: payment.metadata?.productId || 'sample01',
      },
    ])

    if (error) {
      console.error('‚ùå L·ªói l∆∞u ƒë∆°n v√†o Supabase:', error)
      return NextResponse.json({ success: false, error: error.message }, { status: 500 })
    }

    return NextResponse.json({ success: true, data }, { status: 200 })
  } catch (err) {
    console.error('üî• L·ªói m√°y ch·ªß /complete:', err)
    return NextResponse.json({ success: false, error: 'L·ªói m√°y ch·ªß' }, { status: 500 })
  }
}
